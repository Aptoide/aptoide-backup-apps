apply plugin: 'com.android.application'

Properties localProperties = new Properties()
localProperties.load(new FileInputStream("local.properties"))

def FACEBOOK_CONFIGURED = "FACEBOOK_CONFIGURED"
def fabricApiKey = localProperties.FABRIC_API_KEY
def fabricConfigured = fabricApiKey != null
if (fabricConfigured) {
    task fabricGenerateProperties {
        doFirst {
            def fabricProperties = project.file("fabric.properties")
            fabricProperties.delete()
            fabricProperties.append("# Do not modify this file -- YOUR CHANGES WILL BE ERASED!\n")
            fabricProperties.append("apiKey=" + fabricApiKey)
        }
    }
    preBuild.dependsOn(fabricGenerateProperties)
    apply plugin: 'io.fabric'
}

buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.+'
    }
}

repositories {
    maven { url 'https://maven.fabric.io/public' }
}


android {
    compileSdkVersion 21
    buildToolsVersion "23.0.2"

    def BOOLEAN = "boolean"
    def LOCALYTICS_CONFIGURED = "LOCALYTICS_CONFIGURED"

    defaultConfig {
        applicationId "pt.aptoide.backupapps"
        minSdkVersion 9
        targetSdkVersion 21
        versionCode 20102
        versionName "2.1.2.1"

        def localyticsKey = localProperties.LOCALYTICS_RELEASE_KEY
        def localyticsKeyExists = localyticsKey != null
        buildConfigField BOOLEAN, LOCALYTICS_CONFIGURED, localyticsKeyExists.toString()
        manifestPlaceholders = [LOCALYTICS_APP_KEY: localyticsKeyExists ? localyticsKey : ""]

        def facebookAppId = localProperties.FACEBOOK_APP_ID
        def facebookAppIdExists = facebookAppId != null
        buildConfigField BOOLEAN, FACEBOOK_CONFIGURED, facebookAppIdExists.toString()
        facebookAppId = facebookAppIdExists ? facebookAppId.toString() : "0"
        resValue "string", "facebook_app_id", "\"" + facebookAppId + "\""
    }

    signingConfigs { release }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
            signingConfig signingConfigs.release

            applicationVariants.all { variant ->
                variant.outputs.each { output ->
                    project.ext { appName = 'aptoide-BackupApps' }
                    def formattedDate = new Date().format('yyyyMMddHHmmss')
                    def newName = output.outputFile.name
                    newName = newName.replace("app-", "$project.ext.appName-") //"MyAppName" -> I set my app variables in the root project
                    newName = newName.replace("-release", "-" + versionName)
                    //noinspection GroovyAssignabilityCheck
                    output.outputFile = new File(output.outputFile.parent, newName)
                }
            }
        }
    }

    lintOptions {
        // Lots of issues with the project..
        abortOnError false
    }
}

dependencies {
    compile 'com.squareup:otto:1.3.8'
    compile 'com.facebook.android:facebook-android-sdk:3.23.1'
    compile 'com.google.android.gms:play-services:5.0.89'
    compile 'com.nostra13.universalimageloader:universal-image-loader:1.8.6'
    compile project(':actionbarsherlock')
    compile project(':MultiChoiceAdapter')
    compile project(':ViewPagerIndicator')
    compile('com.crashlytics.sdk.android:crashlytics:2.5.5@aar') {
        transitive = true;
    }
    compile files('libs/localytics.jar')
}

def File propFile = new File('signing.properties')
if (propFile.canRead()) {
    def Properties props = new Properties()
    props.load(new FileInputStream(propFile))

    if (props != null && props.containsKey('STORE_FILE') && props.containsKey('STORE_PASSWORD') &&
            props.containsKey('KEY_ALIAS') && props.containsKey('KEY_PASSWORD')) {

        android.signingConfigs.release.storeFile = file(props['STORE_FILE'])
        android.signingConfigs.release.storePassword = props['STORE_PASSWORD']
        android.signingConfigs.release.keyAlias = props['KEY_ALIAS']
        android.signingConfigs.release.keyPassword = props['KEY_PASSWORD']
        println 'all good to go'
    } else {
        android.buildTypes.release.signingConfig = null
        println 'signing.properties found but some entries are missing'
    }
} else {
    println 'signing.properties not found'
    android.buildTypes.release.signingConfig = null
}
